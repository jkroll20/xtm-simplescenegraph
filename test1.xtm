(sys:load "simplescenegraph.xtm")


(begin
    (scene_clear)

    (let ((solar-system (build_node))
          (star (build_sphere 3))   ; make a sphere built from subdivided octahedron, with 8*(4^3)=512 tris
          (planet-orbit (build_node))
          (planet (build_sphere 2)) ; 8*(4^2)=128 tris
          (planet-moon-orbit (build_node))
          (moon-orbit (build_node))
          (moon (build_sphere 1))   ; the moon is smaller, so it doesn't need as much detail
          (borgcube-orbit (build_node)) ; and like in every decent solar system
          (borgcube (build_cube))       ; we have a borg cube orbiting a planet
          )
      (with-node moon
        (name "moon")
        (color 1. 1. 1.)
        (scale .5 .5 .5)
        (parent moon-orbit))
      (with-node moon-orbit
        (name "moon-orbit")
        (translate 1.4 0 0)
        (parent planet-moon-orbit))
      (with-node planet-moon-orbit
        (name "planet-moon-orbit")
        (parent planet-orbit)
        (animate (/ 1.0 30.0)
          (lambda (node time dtime)
            (rotate_node 0.07  0. 1. 0.)
            #t)))
      (with-node planet
        (name "planet")
        (scale 1 1 1)
        (color 0. 1. 1.)
        (parent planet-orbit))
      (with-node planet-orbit
        (name "planet-orbit")
        (translate 4 0 0)
        (parent solar-system))
      (with-node star
        (name "star")
        (color 1. .5 0.)
        (scale 2.5 2.5 2.5)
        (parent solar-system))
      (with-node solar-system
        (name "solar-system")
        (animate (/ 1.0 30.0)
          (lambda (node time dtime)
            (rotate_node 0.02  0. 1. 0.)
            #t)))
      (with-node borgcube-orbit
        (name "borgcube-orbit")
        (parent planet-orbit)
        (animate (/ 1 30)
          (lambda (node time dtime)
            (rotate_node 0.03  0 0 1))))
      (with-node borgcube
        (name "borgcube")
        (translate .95 0 0)
        (scale .5 .5 .5)
        (color 0 1 0)
        (parent borgcube-orbit)
        (animate (/ 1 30)
          (lambda (node time dtime)
            (rotate_node 0.05  1 0 1))))
      (with-node 0  ; world
        (identity)
        (scale 1.2 1.4 1.4)
        (rotate_node 0.3  1 0 0))
      (println 'scene 'graph:)
      (print_scene_graph)
    ))

(define do-world-anim #t)
(define do-world-anim #f)
(with-node 0
  (animate (/ 1.0 30.0)
    (lambda (node time dtime)
      (if do-world-anim
        (begin
          (identity)
          (rotate_node 0.3  1 0 0)
          (scale 1.2 1.4 1.4)
          (let* ((t (* time 0.00008))
                 (s (* (sin t) 1.5)))
            (scale s s s)
            #t))
        #f))))

(with-node 0
  (identity))

(scene_clear)

(println (get_current_node_id))
(print_scene_graph)

(set_current_node_id 0)
(build_sphere 2)
(print_scene_graph)
(scene-fps 30)
(scene_clear)

(scene-start-drawing)
(scene-stop-drawing)

(begin
  (scene_clear)
  (with-node (build_cube)
    (scale 5 5 5)
    (rotate_node 0.5  0 1 0)
    (animate (/ 1 30)
      (lambda (node time dtime)
        (rotate_node 0.05  1 0 0)
        #t))
    ))

(with-node (build_sphere 1)
  (name "testsphere"))

(begin
  (let ((i 0))
    (dotimes (i 10000)
      (with-node (build_node)
        (freenode)))
  (print_scene_graph)))
(begin
  (scene_clear)
  (let ((i 0)
        (lastnode 0)
        (basenode (build_sphere 0))
        (parentnode (build_sphere 0)))
    (with-node basenode
      (with-node parentnode
        (parent basenode))
      (animate (/ 1.0 2)
        (lambda (node time dtime)
          (set! lastnode 0)
          (println 'parentnode: parentnode 'lastnode: lastnode)
          (with-node parentnode
            (freenode))
          (dotimes (i 10)
            (with-node (build_sphere 1)
              ;(translate 0 (* i (* (sin (* time 0.01)) 0.01)) 0)
              (translate 0 0.5 0)
              (scale 0.999 0.999 0.999)
              (color 1 0 0)
              (rotate_node (* (sin (* time 0.001)) 0.1)  0 0 1)
              (parent lastnode)
              (set! lastnode (get_current_node_id))
              ))
          (set! parentnode (build_sphere 0))
          (set! lastnode parentnode)
          #t
          )))))


(println (get_cube_verts))
(xtm_make_node "cube"  (get_cube_verts) (* 12 3)  1.0 1.0 1.0)

(begin
  (scene_clear)
  (let ((i 0)
        (basenode (build_sphere 0))
        (parentnode (build_sphere 0)))
      (with-node basenode
        (name "basenode")
        (with-node parentnode
          (name "parentnode")
          (parent basenode))
        (animate (/ 1.0 16)
          (lambda (node time dtime)
            (with-node basenode ; will stop looping when basenode is removed
              (println 'parentnode: parentnode)
              (with-node parentnode
                (freenode))
              (set! parentnode (build_sphere 0))
              (with-node parentnode
                (name "parentnode"))
              (print_scene_graph)
              ))))))
